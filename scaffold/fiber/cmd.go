package fiber

import (
	"fmt"
	"os"
	"strings"
)

const cmdManagerFileTemplate = `// This file is auto generated by polygo
package cmd

import (
	"fmt"
	"os"
)

func Manager(args []string) {
	argsLength := len(args)
	fn := args[1]
	switch fn {
	case "migrate":
		if argsLength < 3 {
			fmt.Println("Please input up or down")
			os.Exit(1)
		}
		Migrate(args[2])
	default:
		fmt.Println("Unknown command")
		os.Exit(1)
	}
}
`

const serveFileTemplate = `// This file is auto generated by polygo
package cmd

import (
	"fmt"
	"log"

	"${moduleName}/config"
	"${moduleName}/database"
	"${moduleName}/routes"
	"github.com/gofiber/fiber/v2"
)

func Serve() {
	config.SetupENV()
	database.ConnectDB()

	app := fiber.New()

	routes.SetupRoutes(app)

	log.Printf("Listening to http://localhost:%s", config.Env.PORT)
	log.Fatal(app.Listen(fmt.Sprintf(":%s", config.Env.PORT)))
}
`

const migrateFileTemplate = `// This file is auto generated by polygo
package cmd

import (
	"os"

	"${moduleName}/config"
	"${moduleName}/database"
)

func Migrate(arg string) {
	switch arg {
	case "up":
		config.SetupENV()
		database.ConnectDB()
		database.MigrateDB()
	case "down":
		config.SetupENV()
		database.ConnectDB()
		database.DropDB()
	default:
		println("Unknown command")
		os.Exit(1)
	}
}

`

func (fp FiberProject) createCMDManagerFile() error {
	cmdFileBody := cmdManagerFileTemplate

	if err := os.Mkdir(fmt.Sprintf("%s/cmd", fp.Directory), 0755); err != nil {
		return err
	}

	if err := os.WriteFile(fmt.Sprintf("%s/cmd/manager.go", fp.Directory), []byte(cmdFileBody), 0644); err != nil {
		return err
	}

	return nil
}

func (fp FiberProject) createServeFile() error {
	serveFileBody := strings.ReplaceAll(serveFileTemplate, "${moduleName}", fp.ModuleName)

	if err := os.WriteFile(fmt.Sprintf("%s/cmd/serve.go", fp.Directory), []byte(serveFileBody), 0644); err != nil {
		return err
	}

	return nil
}

func (fp FiberProject) createMigrateFile() error {
	migrateFileBody := strings.ReplaceAll(migrateFileTemplate, "${moduleName}", fp.ModuleName)

	if err := os.WriteFile(fmt.Sprintf("%s/cmd/migrate.go", fp.Directory), []byte(migrateFileBody), 0644); err != nil {
		return err
	}

	return nil
}
