package fiber

import (
	"fmt"
	"os"
	"strings"
)

const baseCrudRepoFileTemplate = `// This file is auto generated by polygo
package repositories

import (
	"${moduleName}/models"
	"github.com/gofiber/fiber/v2"
	"github.com/morkid/paginate"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

type IBaseCrudRepo[TModel any, TDto models.IDTO, TPage any] interface {
	Create(input TDto) (uint, error)
	Read(c *fiber.Ctx, dest []TPage) paginate.Page
	Update(id string, input *TDto) error
	Delete(id string) (TModel, error)
	GetByID(id string) (TModel, error)
}

type BaseCrudRepo[TModel any, TDto models.IDTO, TPage any] struct {
	db        *gorm.DB
	pageQuery string
}

func NewBaseCrudRepo[TModel any, TDto models.IDTO, TPage any](db *gorm.DB) *BaseCrudRepo[TModel, TDto, TPage] {
	return &BaseCrudRepo[TModel, TDto, TPage]{
		db: db,
	}
}

func (r *BaseCrudRepo[TModel, TDto, TPage]) Create(input TDto) (uint, error) {
	err := r.db.Create(&input).Error

	return input.GetID(), err
}

func (r *BaseCrudRepo[TModel, TDto, TPage]) Read(c *fiber.Ctx, dest []TPage) paginate.Page {
	pg := paginate.New()

	query := r.db.Raw(r.pageQuery)
	page := pg.With(query).Request(c.Request()).Response(&dest)

	return page
}

func (r *BaseCrudRepo[TModel, TDto, TPage]) Update(id string, input *TDto) error {
	return r.db.Model(input).Where("id = ?", id).Updates(input).Error
}

func (r *BaseCrudRepo[TModel, TDto, TPage]) Delete(id string) (TModel, error) {
	var model TModel
	err := r.db.Clauses(clause.Returning{}).Delete(&model, id).Error

	return model, err
}

func (r *BaseCrudRepo[TModel, TDto, TPage]) GetByID(id string) (TModel, error) {
	var model TModel
	err := r.db.First(&model, id).Error
	return model, err
}
`

const userRepoFileTemplate = `// This file is auto generated by polygo
package repositories

import (
	"time"

	"${moduleName}/models"
	"gorm.io/gorm"
)

const userPageQuery = ` + "`" + `
	select 
		username, 
		email
	from users
` + "`" + `

type IUserRepo interface {
	IBaseCrudRepo[models.User, models.UserDTO, models.UserPage]
	GetByUsernameOrEmail(username string) (models.UserDTO, error)
	Verify(id string) error
}

type UserRepo struct {
	BaseCrudRepo[models.User, models.UserDTO, models.UserPage]
}

func NewUserRepo(db *gorm.DB) *UserRepo {
	return &UserRepo{
		BaseCrudRepo: BaseCrudRepo[models.User, models.UserDTO, models.UserPage]{
			db:        db,
			pageQuery: userPageQuery,
		},
	}
}

func (r *UserRepo) GetByUsernameOrEmail(username string) (models.UserDTO, error) {
	var user models.UserDTO
	err := r.db.Where("(username = ? OR email = ?)", username, username).First(&user).Error
	return user, err
}
`

const authDeviceRepoFileTemplate = `// This file is auto generated by polygo
package repositories

import (
	"${moduleName}/models"
	"gorm.io/gorm"
)

const authorizedDevicePageQuery = ` + "`" + `
	select 
		user_agent,
		ip,
		user_id
	from authorized_devices
` + "`" + `

type IAuthorizedDeviceRepo interface {
	IBaseCrudRepo[models.AuthorizedDevice, models.AuthorizedDeviceDTO, models.AuthorizedDevicePage]
	GetByRefreshToken(token string) (models.AuthorizedDeviceDTO, error)
}

type AuthorizedDeviceRepo struct {
	BaseCrudRepo[models.AuthorizedDevice, models.AuthorizedDeviceDTO, models.AuthorizedDevicePage]
}

func NewAuthorizedDeviceRepo(db *gorm.DB) *AuthorizedDeviceRepo {
	return &AuthorizedDeviceRepo{
		BaseCrudRepo: BaseCrudRepo[models.AuthorizedDevice, models.AuthorizedDeviceDTO, models.AuthorizedDevicePage]{
			db:        db,
			pageQuery: authorizedDevicePageQuery,
		},
	}
}

func (r *AuthorizedDeviceRepo) GetByRefreshToken(token string) (models.AuthorizedDeviceDTO, error) {
	var device models.AuthorizedDeviceDTO
	err := r.db.Where("refresh_token = ?", token).First(&device).Error
	return device, err
}
`

func (fp FiberProject) createRepoFiles() error {
	baseCrudRepoFileBody := strings.ReplaceAll(baseCrudRepoFileTemplate, "${moduleName}", fp.ModuleName)
	userRepoFileBody := strings.ReplaceAll(userRepoFileTemplate, "${moduleName}", fp.ModuleName)
	authDeviceRepoFileBody := strings.ReplaceAll(authDeviceRepoFileTemplate, "${moduleName}", fp.ModuleName)

	if err := os.Mkdir(fmt.Sprintf("%s/repositories", fp.Directory), 0755); err != nil {
		return err
	}

	if err := os.WriteFile(fmt.Sprintf("%s/repositories/base_crud.repo.go", fp.Directory), []byte(baseCrudRepoFileBody), 0644); err != nil {
		return err
	}

	if err := os.WriteFile(fmt.Sprintf("%s/repositories/user.repo.go", fp.Directory), []byte(userRepoFileBody), 0644); err != nil {
		return err
	}

	return os.WriteFile(fmt.Sprintf("%s/repositories/authorized_device.repo.go", fp.Directory), []byte(authDeviceRepoFileBody), 0644)
}
