package fiber

import (
	"fmt"
	"os"
)

const dtoModelFileTemplate = `// This file is auto generated by polygo
package models

import "time"

type IDTO interface {
	GetID() uint
}

type DTO struct {
	ID        uint      ` + "`" + `gorm:"primarykey" json:"-"` + "`" + `
	CreatedAt time.Time ` + "`" + `json:"-"` + "`" + `
	UpdatedAt time.Time ` + "`" + `json:"-"` + "`" + `
}

func (d DTO) GetID() uint {
	return d.ID
}
`

const responseModelFileTemplate = `// This file is auto generated by polygo
package models

type JSONResponse struct {
	Items     interface{} ` + "`" + `json:"items"` + "`" + `
	IsSuccess bool        ` + "`" + `json:"isSuccess"` + "`" + `
	Message   string      ` + "`" + `json:"message"` + "`" + `
}

func NewJSONResponse(items interface{}, message string) *JSONResponse {
	err, ok := items.(error)
	if ok {
		if message == "" {
			message = err.Error()
		}
		return &JSONResponse{
			Items:     nil,
			IsSuccess: false,
			Message:   message,
		}
	}

	return &JSONResponse{
		Items:     items,
		IsSuccess: true,
		Message:   message,
	}
}
`
const userModelFileTemplate = `// This file is auto generated by polygo
package models

import (
	"time"

	"gorm.io/gorm"
)

const userTableName = "users"

type User struct {
	gorm.Model
	Username   string    ` + "`" + `json:"username" gorm:"unique;not null"` + "`" + `
	Email      string    ` + "`" + `json:"email" gorm:"unique;not null" validate:"email"` + "`" + `
	Password   string    ` + "`" + `json:"-" gorm:"not null" validate:"min=8"` + "`" + `
	Salt       string    ` + "`" + `json:"-" gorm:"not null"` + "`" + `
	VerifiedAt time.Time ` + "`" + `json:"verifiedAt"` + "`" + `
}

type UserDTO struct {
	DTO
	Username string ` + "`" + `json:"username" gorm:"unique;not null"` + "`" + `
	Email    string ` + "`" + `json:"email" gorm:"unique;not null" validate:"email"` + "`" + `
	Password string ` + "`" + `json:"password" gorm:"not null" validate:"min=8"` + "`" + `
	Salt     string ` + "`" + `json:"-" gorm:"not null"` + "`" + `
}

type UserPage struct {
	Username string ` + "`" + `json:"username" gorm:"unique;not null"` + "`" + `
	Email    string ` + "`" + `json:"email" gorm:"unique;not null" validate:"email"` + "`" + `
}

type LoginInput struct {
	Username   string ` + "`" + `json:"username" gorm:"unique;not null"` + "`" + `
	Password   string ` + "`" + `json:"password" gorm:"not null" validate:"min=8"` + "`" + `
	IsRemember bool   ` + "`" + `json:"isRemember"` + "`" + `
}

type LoginResponse struct {
	AccessToken  string ` + "`" + `json:"accessToken"` + "`" + `
	RefreshToken string ` + "`" + `json:"refreshToken"` + "`" + `
}

type RefreshInput struct {
	RefreshToken string ` + "`" + `json:"refreshToken" validate:"jwt"` + "`" + `
}

func (UserDTO) TableName() string {
	return userTableName
}
`

const authDeviceModelFileTemplate = `// This file is auto generated by polygo
package models

import "gorm.io/gorm"

const authorizedDeviceTableName = "authorized_devices"

type AuthorizedDevice struct {
	gorm.Model
	RefreshToken string ` + "`" + `gorm:"not null" json:"-"` + "`" + `
	UserAgent    string ` + "`" + `json:"userAgent"` + "`" + `
	Ip           string ` + "`" + `json:"ip"` + "`" + `
	UserID       uint   ` + "`" + `gorm:"not null" json:"userId"` + "`" + `

	User *User ` + "`" + `json:"user"` + "`" + `
}

type AuthorizedDeviceDTO struct {
	DTO
	RefreshToken string ` + "`" + `gorm:"not null" json:"-"` + "`" + `
	UserAgent    string ` + "`" + `json:"userAgent"` + "`" + `
	Ip           string ` + "`" + `json:"ip"` + "`" + `
	UserID       uint   ` + "`" + `gorm:"not null" json:"userId"` + "`" + `
}

type AuthorizedDevicePage struct {
	UserAgent string ` + "`" + `json:"userAgent"` + "`" + `
	Ip        string ` + "`" + `json:"ip"` + "`" + `
	UserID    uint   ` + "`" + `gorm:"not null" json:"userId"` + "`" + `
}

func (AuthorizedDeviceDTO) TableName() string {
	return authorizedDeviceTableName
}
`

func (fp FiberProject) createModelFiles() error {
	if err := os.Mkdir(fmt.Sprintf("%s/internal/models", fp.Directory), 0755); err != nil {
		return err
	}

	if err := os.WriteFile(fmt.Sprintf("%s/internal/models/dto.model.go", fp.Directory), []byte(dtoModelFileTemplate), 0644); err != nil {
		return err
	}

	if err := os.WriteFile(fmt.Sprintf("%s/internal/models/response.model.go", fp.Directory), []byte(responseModelFileTemplate), 0644); err != nil {
		return err
	}

	if err := os.WriteFile(fmt.Sprintf("%s/internal/models/user.model.go", fp.Directory), []byte(userModelFileTemplate), 0644); err != nil {
		return err
	}

	return os.WriteFile(fmt.Sprintf("%s/internal/models/authorized_device.model.go", fp.Directory), []byte(authDeviceModelFileTemplate), 0644)
}
